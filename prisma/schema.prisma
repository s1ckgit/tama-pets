// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String      @id @default(uuid())
  email      String   @unique
  password   String
  pet        Pet?
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([lastActive])
}

model Pet {
  id          String   @id @default(uuid())
  color       String
  breed       String
  name        String
  hunger      Float      @default(100) 
  thirst      Float      @default(100)
  cleanliness Float    @default(100)
  fatigue     Float      @default(100)
  health      Float      @default(100)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  inventory   PetInventory?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PetInventory {
  id       String          @id @default(uuid())
  petId    String          @unique
  pet      Pet             @relation(fields: [petId], references: [id])
  items    InventoryItem[]
}

model Item {
  id          String          @id @default(uuid())
  name        String
  stats       Json
  experience  Float
  inventories InventoryItem[]
}
model InventoryItem {
  id              String         @id @default(uuid())
  petInventoryId  String
  itemId          String
  quantity        Int            @default(1)
  petInventory    PetInventory   @relation(fields: [petInventoryId], references: [id], onDelete: Cascade)
  item            Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([petInventoryId], map: "idx_petInventoryId")
  @@index([itemId], map: "idx_itemId")
}
